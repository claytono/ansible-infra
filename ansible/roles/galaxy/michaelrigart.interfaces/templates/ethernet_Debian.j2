{% if not interfaces_merge %}# {{ ansible_managed }}
{% else %}# Ethernet - {{ item.device }}
{% endif %}

{{ item.allowclass | default('auto') }} {{ item.device }}
{% if item.bootproto == 'manual' %}
iface {{ item.device }} inet manual
{% endif %}
{% if item.bootproto == 'dhcp' %}
iface {{ item.device }} inet dhcp
{% endif %}
{% if item.bootproto == 'static' %}
iface {{ item.device }} inet static
{% if item.address is defined %}
address {{ item.address }}
{% endif %}
{% if item.netmask is defined %}
netmask {{ item.netmask }}
{% endif %}
{% if item.gateway is defined %}
gateway {{ item.gateway }}
{% endif %}
{% if item.dnsnameservers is defined %}
dns-nameservers {{ item.dnsnameservers }}
{% endif %}
{% endif %}
{% if item.mtu is defined %}
mtu {{ item.mtu }}
{% endif %}
{% if item.hwaddr is defined %}
hwaddress ether {{ item.hwaddr }}
{% endif %}
{% if item.pre_up is defined %}
pre-up {{ item.pre_up }}
{% endif %}
{% if item.dnssearch is defined %}
dns-search {{ item.dnssearch }}
{% endif %}
{% if item.wpaconf is defined %}
wpa-conf {{ item.wpaconf }}
{% endif %}

{% if item.route is defined %}
{%   for i in item.route %}
{# Workaround for Ansible bug https://github.com/ansible/ansible/issues/17872. #}
{%     if i is mapping %} {# If route is not a mapping, then assume it's a complete rule #}
{%       set prefix = ('0.0.0.0/' ~ i.netmask) | ansible.utils.ipaddr('prefix') %}
{%       set route = i.network ~ '/' ~ prefix %}
{%       if 'gateway' in i %}
{%         set route = route ~ ' via ' ~ i.gateway %}
{%       else %}
{%         set route = route ~ ' dev ' ~ item.device %}
{%       endif %}
{%       if 'table' in i %}
{%         set route = route ~ ' table ' ~ i.table %}
{%       endif %}
{%       for option in i.options | default([]) %}
{%         if option is mapping %}
{%           set option = (option | dict2items | first).key %}
{%         endif %}
{%         set route = route ~ ' ' ~ option %}
{%       endfor %}
{%     else %}
{%       set route = i %}
{%     endif %}
up ip route add {{ route }}
down ip route del {{ route }}
{%   endfor %}

{% endif %}
{% if item.rules is defined %}
{% for rule in item.rules %}
{%   if rule is mapping %}
{%     if rule.to is defined %}
{%       set rule_str = 'to ' ~ rule.to %}
{%     endif %}
{%     if rule.from is defined %}
{%       set rule_str = 'from ' ~ rule.from %}
{%     endif %}
{%     if rule.table is defined %}
{%       set rule_str = rule_str ~ ' table' ~ rule.table %}
{%     endif %}
{%   else %}
{%     set rule_str = rule %}
{%   endif %}
up ip rule add {{ rule_str }}
down ip rule del {{ rule_str }}
{% endfor %}
{% endif %}

{% if item.device is match(vlan_interface_regex) %}

vlan-raw-device {{ item.device | regex_replace(vlan_interface_suffix_regex, '') }}
{% endif %}
{% if item.bootproto == 'static' %}

{% if item.ip6 is defined %}
iface {{ item.device }} inet6 static
address {{ item.ip6.address }}
{% if item.ip6.prefix is defined %}
netmask {{ item.ip6.prefix }}
{% endif %}
{% if item.ip6.gateway is defined %}
gateway {{ item.ip6.gateway }}
{% endif %}
{% endif %}
{% endif %}
{% if item.ip6 is defined %}

{% for i in item.ip6.route | default([]) %}
{% set route = i.network %}
{% if 'gateway' in i %}
{% set route = route ~ ' via ' ~ i.gateway %}
{% else %}
{% set route = route ~ ' dev ' ~ item.device %}
{% endif %}
{% if 'table' in i %}
{% set route = route ~ ' table ' ~ i.table %}
{% endif %}
{% for option in i.options | default([]) %}
{%   if option is mapping %}
{%     set option = (option | dict2items | first).key %}
{%   endif %}
{%   set route = route ~ ' ' ~ option %}
{% endfor %}
up ip -6 route add {{ route }}
down ip -6 route del {{ route }}
{% endfor %}
{% endif %}
